% Generated by roxygen2 (4.0.2): do not edit by hand
\name{hive_query}
\alias{hive_query}
\title{Run a query against the WMF hive instance}
\usage{
hive_query(query, db = "wmf_raw", user, dt = TRUE)
}
\arguments{
\item{query}{a query, or the location of a .hql file containing a query.}

\item{db}{the database to use. Set to wmf_raw (which contains the webrequest table) by default.}

\item{user}{your hive username (normally your stat100* username)}

\item{dt}{Whether to return it as a data.table or not.}
}
\value{
a data.frame or data.table containing the results of the query.
}
\description{
\code{hive_query} is a simple wrapper around the command line that makes queries
against our Hive/Hadoop infrastructure more convenient.
}
\section{handling our hadoop/hive setup}{


The \code{webrequests} table is documented
\href{https://wikitech.wikimedia.org/wiki/Analytics/Cluster/Hive}{on Wikitech}, which also provides
\href{https://wikitech.wikimedia.org/wiki/Analytics/Cluster/Hive/Queries}{a set of example
queries}.

When it comes to manipulating the rows with Java before they get to you, Nuria has written a
\href{https://wikitech.wikimedia.org/wiki/Analytics/Cluster/Hive/QueryUsingUDF}{brief tutorial on loading UDFs}
which should help if you want to engage in that; the example provided is a user agent parser, allowing you to
get the equivalent of \code{\link{ua_parse}}'s output further upstream.
}
\seealso{
\code{\link{log_strptime}} for converting the "dt" column in the webrequests table to POSIXlt,
\code{\link{parse_uuids}} for parsing app unique IDs out of requestlog URLs,
and \code{\link{mysql_query}} and \code{\link{global_query}} for querying our MySQL databases.
}

